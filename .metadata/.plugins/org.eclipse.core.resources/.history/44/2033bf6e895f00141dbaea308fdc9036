package watermelon.group5;

import java.util.*;

import watermelon.sim.Pair;
import watermelon.sim.Point;
import watermelon.sim.seed;

public class Player extends watermelon.sim.Player {
	static double distowall = 1.00;
	static double distotree = 2.00;
	static double distoseed = 2.00;

	double m_length, m_width;
	
	public void init() {

	}

	@Override
	public ArrayList<seed> move(ArrayList<Pair> treelist, double width, double length, double s) {
		// TODO Auto-generated method stub
		ArrayList<seed> seedlist;
		if (length > width)
			seedlist = Packing.hexagonal(treelist, length, width);
		else
			seedlist = Packing.hexagonal_invert(treelist, length, width);
		
		ArrayList<seed> finallistConcentric = Coloring.concentric_top_left(seedlist, s, length, width);
		ArrayList<seed> finallistInsideOut = Coloring.insideout(seedlist, s, length, width);
		ArrayList<seed> finallistInvertTopLeft = Coloring.neighbor_invert_topleft(seedlist, s, length, width);	
		
		double scoreConcentric=PlayerUtil.calculatescore(finallistConcentric, s);
		double scoreInsideOut=PlayerUtil.calculatescore(finallistInsideOut, s);
		double scoreInvertTopLeft=PlayerUtil.calculatescore(finallistInvertTopLeft, s);
		double max=Math.max(scoreConcentric, Math.max(scoreInsideOut,scoreInvertTopLeft));
		
		return ;
	}
	
	

}