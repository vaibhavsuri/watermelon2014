package watermelon.group5;

import java.util.ArrayList;
import java.util.List;

import watermelon.sim.Pair;
import watermelon.sim.Point;
import watermelon.sim.seed;
public class Moving {

	 public static List<seed> move(
			  List<seed> seedList, 
			  seed start,
			  List<Pair>treeList,
			  double s,
			  double width,
			  double length){

			List<seed> startList = new ArrayList<>();
			
			for (double l = length / 5 ; l <  length  ; l += length / 5 ){
			  for ( double w = width / 5 ; w < width  ; w += width / 5){
			    startList.addAll(PlayerUtil.getNeighborSeeds(new seed(l,w,false),seedList));
			  }
			}
			
			
			
		 return seedList;
	 }
	
  // start is not included in the seedList
  public static List<seed> moveAround(
		  List<seed> seedList, 
		  seed start,
		  List<Pair>treeList,
		  double s,
		  double width,
		  double length){
	  
	  	
	  double deltaAngle = 0.5;
	  double deltaPosition = 1;
	  seedList.add(start);
	  double bestScore = PlayerUtil.calculatescore(seedList, s);
	  seedList.remove(seedList.size()-1);
	  seed temp = new seed(start.x, start.y, start.tetraploid);
	  
	  for ( double theta = 0 ; theta < 360 ; theta += deltaAngle){
		  double deltaX = Math.cos(Math.toRadians(theta)) * deltaPosition;
		  double deltaY = Math.sin(Math.toRadians(theta)) * deltaPosition;
		  while(true){
			  temp.x += deltaX;
			  temp.y += deltaY;
			  seedList.add(temp);
			  if(!PlayerUtil.validateseed(seedList, width, length, treeList)){
				  seedList.remove(seedList.size()-1);
				  break;
			  }
			  
			  double tempScore = PlayerUtil.calculatescore(seedList, s);
			  
			  if (tempScore > bestScore ){
				  start.x = temp.x;
				  start.y = temp.y;
				  bestScore = tempScore;
			  }
			  
		  }
		 
		  
	  }
	  seedList.add(start);
	  
	  return seedList;
	  
	  
  }
	
}
